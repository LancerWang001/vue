/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from 'shared/util'

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
export function simpleNormalizeChildren (children: any) {
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
// 子节点标准处理流程
export function normalizeChildren (children: any): ?Array<VNode> {
	// 如果children是原始类型，则返回一维文本节点数组
  return isPrimitive(children)
    ? [createTextVNode(children)]
		// 如果children是数组，
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

// 标准子节点扁平化流程
function normalizeArrayChildren (children: any, nestedIndex?: string): Array<VNode> {
	// 初始化VNode一维数组
  const res = []
	// 初始化变量i：当前循环索引，lastIndex：循环结束索引，c：当前循环子节点，last：循环结束子节点
  let i, c, lastIndex, last
	// 遍历所有子节点
  for (i = 0; i < children.length; i++) {
		// 获取当前子节点
    c = children[i]
		// 如果当前子节点为空或为布尔值，则跳过本次循环
    if (isUndef(c) || typeof c === 'boolean') continue
		// 获取循环结束索引
    lastIndex = res.length - 1
		// 获取循环结束子节点
    last = res[lastIndex]
    //  nested
		// 处理嵌套子节点
		// 如果当前循环子节点为数组，则递归调用`normalizeArrayChildren`，获得嵌套子节点的一维数组
    if (Array.isArray(c)) {
      if (c.length > 0) {
				// 递归调用`normalizeArrayChildren`，获得嵌套子节点的一维数组
        c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)
        // merge adjacent text nodes
				// 如果嵌套子节点数组的头节点和循环结束节点都为文本节点，则合并这两个文本节点，
        if (isTextNode(c[0]) && isTextNode(last)) {
					// 为循环结束子节点重新赋值为合并节点
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text)
					// 将嵌套子节点数组的头节点删除
          c.shift()
        }
				// 将嵌套子节点数组与循环的一维数组进行连接
        res.push.apply(res, c)
      }
    }
		// 如果当前循环子节点是原始类型
		else if (isPrimitive(c)) {
			// 如果循环结束子节点为文本节点，则合并循环结束节点和当前循环子节点
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
				// 合并循环结束节点和当前循环子节点
				// 将循环结束节点插入循环数组的尾部
        res[lastIndex] = createTextVNode(last.text + c)
      }
			// 如果循环结束子节点不为文本节点，且当前循环节点不为空字符串，则向循环数组尾部插入新创建的文本节点
			else if (c !== '') {
        // convert primitive to vnode
				// 根据当前循环节点创建新文本节点
				// 将新文本节点插入循环数组尾部
        res.push(createTextVNode(c))
      }
    } else {
			// 如果循环结束子节点为文本节点，则合并循环结束节点和当前循环子节点
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
				// 根据循环结束节点文本与当前循环节点文本的合并结果，创建新的文本节点
				// 将新的文本节点插入循环一维数组的尾部
        res[lastIndex] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for)
				// 否则，将当前循环子节点插入循环一维数组尾部
				// 满足以下条件，为当前循环子节点设置`__vlist`的标识
        if (
					// 1. 根子节点children设置了_isVList标识
					isTrue(children._isVList) &&
					// 2. 当前循环子节点tag不为空
          isDef(c.tag) &&
					// 3. 当前循环子节点key值为空
          isUndef(c.key) &&
					// 4. 子节点嵌套索引不为空
          isDef(nestedIndex)
				) {
					// 为当前循环子节点设置`__vlist`的标识
          c.key = `__vlist${nestedIndex}_${i}__`
        }
				// 将当前循环子节点插入循环一维数组尾部
        res.push(c)
      }
    }
  }
	// 返回一维数组
  return res
}
